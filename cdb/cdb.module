<?php
/**
 * TODO:
 * 1. add requirements for php-on-couch
 *
 */


/**
 * Drupal wrapper module for a php library PHP-on-Couch, https://github.com/dready92/PHP-on-Couch
 * It's just an API module. There is no an UI functionality.
 */


/**
 * Init an object of couchClient type, required for work with CouchDB (PHP-On-Couch library)
 * 
 * @param $couchdb_server_dsn
 *   Name or path to the server (for example: localhost:5984)
 *
 * @param $couchdb_database_name
 *   Name of a database
 *
 * @return bool|couchClient|int
 *   Object, exception or FALSE (if there is noe library)
 */
function cdb_init_connection($couchdb_server_dsn, $couchdb_database_name) {
  $client = FALSE;

  if ($lib_path = libraries_get_path('PHP-on-Couch')) {
    require_once $lib_path . "/couch.php";
    require_once $lib_path . "/couchClient.php";
    require_once $lib_path . "/couchDocument.php";
    try {
      $client = new couchClient($couchdb_server_dsn, $couchdb_database_name);
    }
    catch(Exception $e) {
      $err = "CoudhDB module error: " . $e->getMessage() . " (" . $e->getCode() . ")";
      watchdog('CDB', $err);
      $client = $e->getCode();
    }
  }

  return $client;
}

/**
 *  Save a document to CouchDB
 *
 * @param $client
 *   Object of the couchClient type (DB that we use to record)
 *
 * @param $object_to_store
 *   Object of stdClass  -- data which we want to save to the DB
 *
 * @return
 *   object, CouchDB document storage response
 *
 */
function cdb_store_doc($client, $object_to_store) {
  $response = NULL;

  if (is_a($client, 'couchClient') && is_object($object_to_store)) {
    try {
      $response = $client->storeDoc($object_to_store);
    } catch (Exception $e) {
      $err = "CoudhDB module error: " . $e->getMessage() . " (" . $e->getCode() . ")";
      watchdog('CDB', $err);
      $response = NULL;
    }
  }

  return $response;
}

/**
 * Check the availability of the document in the database
 *
 * @param $client
 *   Object of the couchClient type
 *
 * @param $object_id
 *   An ID of the db document for check
 *
 * @return bool|int
 *   TRUE, FALSE, -1 -- error
 *
 */
function cdb_doc_exist($client, $object_id) {
  $response = -1;
  if (is_a($client, 'couchClient')) {
    if (cdb_get_doc($client, $object_id) != NULL) {
      $response = TRUE;
    }
    else {
      $response = FALSE;
    }
  }
  return $response;
}

/**
 * Request for all documents in the database
 *
 * @param $client
 *   Object of the couchClient type
 *
 * @return StdClass|null
 *   StdClass object with the fields (example): 
 *   - $object->total_rows (Integer) 12
 *   - $object->offset (Integer) 0
 *   - $object->rows (Array, 12 elements)
 *
 *   Array $object->rows, this is an array of stdClass objects:
 *   - $object->rows[X]->id // string
 *   - $object->rows[X]->key // string
 *   - $object->rows[X]->value // StdClass: $object->rows[X]->value->rev
 */
function cdb_get_all_docs($client) {
  if (is_a($client, 'couchClient')) {
    return $client->getAllDocs();
  }
  else {
    return NULL;
  }
}

/**
 * Request for all FULL documents in the database
 * 
 * The same as: $client->include_docs(TRUE)->getAllDocs(), but on output just objects
 *
 * @param $client
 *   Object of the couchClient type
 *
 * @return array|null
 *   An array of DB objects (documents) with all fields  
 */
function cdb_get_all_docs_full($client) {
  if (is_a($client, 'couchClient')) {
    $all_docs = $client->getAllDocs();
    $docs = array();
    foreach ($all_docs->rows as $row) {
      $docs[] = $client->getDoc($row->id);
    }
    return $docs;
  }
  else {
    return NULL;
  }
}

/**
 * Get a document by $doc_id
 *
 * @param $client
 *   Object of the couchClient type
 *
 * @param $doc_id
 *   $doc_id
 *
 * @return
 *   NULL or DB object (document)
 */
function cdb_get_doc($client, $doc_id) {
  $response = NULL;
  try {
    $doc = $client->getDoc($doc_id);
    $response = $doc;
  }
  catch ( Exception $e ) {
    if ( $e->getCode() == 404 ) {
      $err = "CoudhDB module error: " . $e->getMessage() . " (" . $e->getCode() . ")";
      watchdog('CDB', $err);
      $response = NULL;
    }
  }
  return $response;
}

/**
 * Delete a document
 *
 * @param $client
 *   Object of the couchClient type
 *
 * @param $doc
 *   Document (object) from the CouchDB. IMPORTANT: an object must contain _id and _rev fields as a minimum
 *
 * @return bool
 *   TRUE for success, FALSE for non success
 */
function cdb_delete_doc($client, $doc) {
  $response = FALSE;
  if (is_a($client, 'couchClient') && is_object($doc)) {
    try {
      $client->deleteDoc($doc);
      $response = TRUE;
    }
    catch (Exception $e) {
      $err = "CoudhDB module error: " . $e->getMessage() . " (" . $e->getCode() . ")";
      watchdog('CDB', $err);
      $response = FALSE;
    }
  }
  return $response;
}

/**
 * Delete all docs in CouchDB
 *
 * @param $client
 *   Object of the couchClient type
 *
 * @return bool
 *   TRUE|FALSE
 *
 */
function cdb_delete_all_docs($client) {
  $response = FALSE;
  if (is_a($client, 'couchClient')) {
    $all_docs = cdb_get_all_docs($client); // get objects with id, rev and value
    foreach ($all_docs->rows as $doc) {
      // We need to pass object with _id and _rev properties, just copy them.
      $doc->_id = $doc->id;
      unset($doc->id);
      $doc->_rev = $doc->value->rev;
      unset($doc->value);
      cdb_delete_doc($client, $doc);
    }
    $response = TRUE;
  }
  return $response;
}

/**
 * Delete documents in DB depends on their properties
 *
 * Example:
 * $res = cdb_delete_selected_docs($client, 'type', 'deductor_stat');
 * 
 * Delete all documents which have field: type = 'deductor_stat'
 *
 * @param $client
 *   Object of the couchClient type
 *
 * @param $field_name
 *   Field name (a property of an object)
 *
 * @param $field_value
 *   Field value (a property of an object)
 *
 * @return bool|int
 *   FALSE - if not deleted or a number of deleted documents
 */
function cdb_delete_selected_docs($client, $field_name, $field_value) {
  $response = FALSE;
  if (is_a($client, 'couchClient')) {
    $all_docs = cdb_get_all_docs_full($client);
    $i = 0;
    foreach ($all_docs as $doc) {
      if (property_exists($doc, $field_name)) {
        if ($doc->{$field_name} == $field_value) {
          cdb_delete_doc($client, $doc);
          $i++;
        }
      }
    }
    $response = $i;
  }
  return $response;
}

/**
 * Update fields in a document
 *
 * Example: cdb_update_document($client, 'f734d7b7ada8e47676e772f22801b889', 'time', time());
 *
 * @param $client
 *   Object of the couchClient type
 *
 * @param $doc_id
 * 
 * @param $field_name
 *   Field name (a property of an object)
 *   
 * @param $field_value
 *   Fields value (a property of an object)
 *   
 * @return bool
 *   TRUE|FALSE
 *
 */
function cdb_update_document($client, $doc_id, $field_name, $field_value) {
  $response = FALSE;
  if (is_a($client, 'couchClient')) {
    if ($new_doc = cdb_get_doc($client, $doc_id)) {
      $new_doc->{$field_name} = $field_value;
      cdb_store_doc($client, $new_doc);
      $response = TRUE;
    }
  }
  return $response;
}

/**
 * Create the database specified in @see cdb_init_connection
 *
 * Example:
 *   $client = cdb_init_connection('localhost:5984', 'my_new_bd');
 *   cdb_create_database($client);
 * Create 'my_new_bd' database
 *
 * @param $client
 *   Object of the couchClient type
 *
 * @return bool
 *   TRUE|FALSE
 */
function cdb_create_database($client) {
  $response = FALSE;
  if (is_a($client, 'couchClient')) {
    if (!$client->databaseExists()) {
      $client->createDatabase();
      $response = TRUE;
    }
  }
  return $response;
}

/**
 * Delete the database specified in @see cdb_init_connection
 *
 * Example:
 *   $client = cdb_init_connection('localhost:5984', 'bd_to_delete');
 *   cdb_delete_database($client);
 * Delete 'bd_to_delete' database
 *
 * @param $client
 *   Object of the couchClient type
 *
 * @return bool
 *   TRUE|FALSE
 */
function cdb_delete_database($client) {
  $response = FALSE;
  if (is_a($client, 'couchClient')) {
    if ($client->databaseExists()) {
      $client->deleteDatabase();
      $response = TRUE;
    }
  }
  return $response;
}

/**
 * Create a View
 *
 * @param $client
 *   Object of the couchClient type
 *
 * @param $view_function
 *   Javascript function. Example: 'function(doc) { emit(doc.time,null); }'
 *
 * @param $view_name
 *   A name of the view
 *
 * @param $design_doc_id
 *   The last part of the document's ID. Full ID will be: _design/{$design_doc_id}
 *  
 * @return bool
 *   TRUE|FALSE
 *
 * Example of creating a view to display records sorted by date (documents have a field 'time'):
 *   $view_function = 'function(doc) { emit(doc.time,null); }';
 *   $view_name = 'by_date';
 *   $design_doc_id = 'all_by_date';
 *   $res = cdb_create_view($client, $view_function, $view_name, $design_doc_id);
 *
 */
function cdb_create_view($client, $view_function, $view_name, $design_doc_id) {
  $response = FALSE;
  if (is_a($client, 'couchClient')) {
    $view_fn = $view_function;
    $design_doc = new stdClass();
    $design_doc->_id = '_design/' . $design_doc_id;
    $design_doc->language = 'javascript';
    $design_doc->views = array($view_name => array('map' => $view_fn));
    $check = cdb_doc_exist($client, $design_doc->_id);
    if (!$check && $check != -1) {
      cdb_store_doc($client, $design_doc);
      $response = TRUE;
    }
  }
  return $response;
}

/**
 * Get a view
 * 
 * @param $client
 *  Object of the couchClient type
 *
 * @param $view_id, @param $view_name
 *   From creating:
 *   $design_doc->_id = '_design/all'; 'all' <-- view_id
 *   $design_doc->views = array ( 'by_date'=> array ('map' => $view_fn ) ); <-- 'by_name' - view name
 *
 * @return FALSE|Object StdClass
 *   StdClass object with fields (example):
 *   - $object->total_rows (Integer) 12
 *   - $object->offset (Integer) 0
 *   - $object->rows (Array, 12 elements)
 *
 *   An array $object->rows, this is an array of stdClass objects:
 *   - $object->rows[X]->id // string
 *   - $object->rows[X]->key // string
 *   - $object->rows[X]->value // StdClass: $object->rows[X]->value->rev
 */
function cdb_get_view($client, $view_id, $view_name) {
  $response = FALSE;
  if (is_a($client, 'couchClient')) {
    $check = cdb_doc_exist($client, '_design/' . $view_id);
    if ($check) {
      $client->descending(TRUE); // last records
      $response = $client->getView($view_id, $view_name);
    }
  }
  return $response;
}

/**
 * Get a view's objects (view results)
 * 
 * @param $client
 *  Object of the couchClient type
 *
 * @param $view_id, @param $view_name
 *   From creating:
 *   $design_doc->_id = '_design/all'; 'all' <-- view_id
 *   $design_doc->views = array ( 'by_date'=> array ('map' => $view_fn ) ); <-- 'by_name' - view name
 *
 * @param $conunt
 *   Number of results we want to recieve. NULL to all results
 *
 * @return FALSE|Array of objects (docs)
 *
 */
function cdb_get_view_objects($client, $view_id, $view_name, $count = NULL) {
  $response = FALSE;
  if (is_a($client, 'couchClient')) {
    $check = cdb_doc_exist($client, '_design/' . $view_id);
    if ($check) {
      $response = array();
      if ($count !== NULL && is_integer($count)) {
        $client->limit($count);
      }
      $client->descending(TRUE); // last records get in the first 
      foreach($client->getView($view_id, $view_name)->rows as $doc) {
        $response[] = $doc->value;
      }
    }
  }
  return $response;
}

/**
 * Get a count of objects (documents) in a view
 * 
 * @param $client
 *  Object of the couchClient type
 *
 * @param $view_id, @param $view_name
 *   From creating:
 *   $design_doc->_id = '_design/all'; 'all' <-- view_id
 *   $design_doc->views = array ( 'by_date'=> array ('map' => $view_fn ) ); <-- 'by_name' - view name
 *
 * @return FALSE|int
 *   Number of records in a view
 */
function cdb_get_view_count($client, $view_id, $view_name) {
  $response = FALSE;
  if (is_a($client, 'couchClient')) {
    $check = cdb_doc_exist($client, '_design/' . $view_id);
    if ($check) {
      $response = sizeof($client->getView($view_id, $view_name)->rows);
    }
  }
  return $response;
}

/**
 * Get a count of objects (documents) in a view based on keys
 * 
 * @param $client
 *   Object of the couchClient type
 *
 * @param $view_id, @param $view_name
 *   From creating:
 *   $design_doc->_id = '_design/all'; 'all' <-- view_id
 *   $design_doc->views = array ( 'by_date'=> array ('map' => $view_fn ) ); <-- 'by_name' - view name
 *
 * @param $start_key
 *   Start key
 *
 * @param $end_key
 *   End key
 *
 * @return bool|int
 *   FALSE or number of documents
 */
function cdb_get_view_count_by_keys($client, $view_id, $view_name, $start_key, $end_key) {
  $response = FALSE;
  if (is_a($client, 'couchClient')) {
    $check = cdb_doc_exist($client, '_design/' . $view_id);
    if ($check) {
      $client->startkey($start_key);
      $client->endkey($end_key);
      $response = sizeof($client->getView($view_id, $view_name)->rows);
    }
  }
  return $response;
}

